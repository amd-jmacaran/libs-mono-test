# Auto Label PR
# -------------
# This GitHub Actions workflow automatically adds or removes labels on a pull request
# based on a custom Python script that analyzes the PR content and paths.
#
# Steps:
#   - Run pr_category_label.py to determine which category labels to add/remove
#   - Update labels on the PR using GitHub CLI (gh)
#   - Check if the PR creator is a member of the specified organization and add/remove labels accordingly
#   - Run pr_fanout_sync_labels.py to sync custom labels from the monorepo PR to the subrepo PRs

name: Auto Label PR

on:
  workflow_run:
    workflows: ["Fanout Subtree PRs"]
    types:
      - completed
  pull_request:
    types:
      - labeled
      - unlabeled

# ensure that the workflow is not running for the same PR multiple times at once
concurrency:
  group: pr-auto-label-${{ github.event.pull_request.number }}
  cancel-in-progress: false

# the monorepo and subrepos assumed to have these labels created in advance
env:
  ORG_TO_CHECK: ROCm
  ORG_LABEL: "organization: ROCm"
  EXTERNAL_LABEL: "external contribution"

jobs:
  auto-label-pr:
    runs-on: ubuntu-24.04
    steps:
      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2.0.6
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout workflows
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          sparse-checkout: '.github'
          token: ${{ steps.generate-token.outputs.token }} # since we are touching labels on subrepository PRs

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.12'

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pydantic requests

      - name: Set up Git user
        run: |
          git config user.name "assistant-librarian[bot]"
          git config user.email "assistant-librarian[bot]@users.noreply.github.com"

      - name: Determine PR Number (workflow_run case only)
        id: pr_number
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            BRANCH_NAME="${{ github.event.workflow_run.head_branch }}"
            PR_NUMBER=$(gh pr list --head "${{ github.event.workflow_run.head_branch }}" --state open --json number -R "${{ github.repository }}" --jq '.[0].number')
          else
            PR_NUMBER="${{ github.event.pull_request.number }}"
          fi
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

      - name: Compute Category Labels for PR
        id: compute_labels
        env:
          GH_TOKEN: ${{ secrets.MONOREPO_BOT_TOKEN }}
        run: |
          python .github/scripts/pr_category_label.py \
            --repo ${{ github.repository }} \
            --pr ${{ steps.pr_number.outputs.pr_number }}

      - name: Update labels
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          if [ -n "${{ steps.compute_labels.outputs.label_remove }}" ]; then
            gh pr edit "${{ steps.pr_number.outputs.pr_number }}" --remove-label "${{ steps.compute_labels.outputs.label_remove }}"
          fi
          if [ -n "${{ steps.compute_labels.outputs.label_add }}" ]; then
            gh pr edit "${{ steps.pr_number.outputs.pr_number }}" --add-label "${{ steps.compute_labels.outputs.label_add }}"
          fi

      - name: Check if PR creator is in org and label accordingly
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          if gh api orgs/${{ env.ORG_TO_CHECK }}/members/${{ github.event.pull_request.user.login }} --silent; then
            gh pr edit "${{ github.event.pull_request.number }}" --repo "${{ github.repository }}" --add-label "${{ env.ORG_LABEL }}"
          else
            gh pr edit "${{ github.event.pull_request.number }}" --repo "${{ github.repository }}" --add-label "${{ env.EXTERNAL_LABEL}}"
            # force remove the org label when the user is not in the org
            gh pr edit "${{ github.event.pull_request.number }}" --repo "${{ github.repository }}" --remove-label "${{ env.ORG_LABEL }}"
          fi

      - name: Sync Custom Labels from Monorepo PR
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          python .github/scripts/pr_fanout_sync_labels.py \
            --repo ${{ github.repository }} \
            --pr "${{ steps.pr_number.outputs.pr_number }}" \
            --config ".github/repos-config.json"
